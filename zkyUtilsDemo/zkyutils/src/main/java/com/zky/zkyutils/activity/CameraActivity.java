package com.zky.zkyutils.activity;/** * Created by dou on 2015/4/28. */import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.ImageFormat;import android.graphics.Matrix;import android.graphics.PixelFormat;import android.graphics.Point;import android.graphics.Rect;import android.graphics.YuvImage;import android.hardware.Camera;import android.hardware.Camera.Size;import android.os.Build;import android.os.Bundle;import android.util.DisplayMetrics;import android.util.Log;import android.view.KeyEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.view.View;import android.view.WindowManager;import android.widget.Button;import android.widget.FrameLayout;import android.widget.RelativeLayout;import android.widget.Toast;import com.zky.zkyutils.R;import java.io.BufferedOutputStream;import java.io.ByteArrayOutputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.Collections;import java.util.Comparator;import java.util.List;public class CameraActivity extends Activity implements View.OnClickListener {    private static final String Tag = "camera";    boolean isClick = true;    Camera.ShutterCallback myShutterCallback = new Camera.ShutterCallback() {        public void onShutter() {        }    };    Camera.PictureCallback myRawCallback = new Camera.PictureCallback() {        public void onPictureTaken(byte[] data, Camera camera) {        }    };    private Camera.Parameters parameters;    private Camera m_camera;    private CameraPreview m_preview;    private Bitmap tempBitmap = null;    private SurfaceHolder mHolder;    private int cameraPosition = 1;//0前置 ，1后置    /*     * 视图     */    private FrameLayout preview;    private Button camera_ok;    private Button camera_exit;    private Button camera_back;    private Button camera_swicth;    private Button camera_shutter;    private String picPath;    private long time = 1000;    //首先定义一个接口，用来处理拍摄完毕之后的动作    private Camera.PictureCallback mPicture = new Camera.PictureCallback() {        @Override        public void onPictureTaken(byte[] data, Camera camera) {        }    };    private CameraSizeComparator sizeComparator = new CameraSizeComparator();    public static Camera getCameraInstance() {        Camera c = null;        try {            c = Camera.open();// attempt to get a Camera instance            Log.v(Tag, "camera open is OK!");        } catch (Exception e) {            Log.v(Tag, "camera open excetion!");        }        return c;    }    /**     * 获取屏幕长宽比     *     * @param context     * @return     */    public static float getScreenRate(Context context) {        Point P = getScreenMetrics(context);        float H = P.y;        float W = P.x;        return (H / W);    }    /**     * 获取屏幕宽度和高度，单位为px     *     * @param context     * @return     */    public static Point getScreenMetrics(Context context) {        DisplayMetrics dm = context.getResources().getDisplayMetrics();        int w_screen = dm.widthPixels;        int h_screen = dm.heightPixels;        return new Point(w_screen, h_screen);    }    private static boolean checkCameraFacing(final int facing) {        if (getSdkVersion() < Build.VERSION_CODES.GINGERBREAD) {            return false;        }        final int cameraCount = Camera.getNumberOfCameras();        Camera.CameraInfo info = new Camera.CameraInfo();        for (int i = 0; i < cameraCount; i++) {            Camera.getCameraInfo(i, info);            if (facing == info.facing) {                return true;            }        }        return false;    }    public static boolean hasBackFacingCamera() {        final int CAMERA_FACING_BACK = 0;        return checkCameraFacing(CAMERA_FACING_BACK);    }    public static boolean hasFrontFacingCamera() {        final int CAMERA_FACING_BACK = 1;        return checkCameraFacing(CAMERA_FACING_BACK);    }    public static int getSdkVersion() {        return android.os.Build.VERSION.SDK_INT;    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);        setContentView(R.layout.activity_camera);        picPath = getIntent().getStringExtra("picPath");        boolean backCamera = hasBackFacingCamera();        boolean frontCamera = hasFrontFacingCamera();        if (!backCamera && !frontCamera) {            //检测硬件            checkCameraHardware(this);        }        //初始化摄像头        m_camera = getCameraInstance();        // 为本Activity创建一个预览        m_preview = new CameraPreview(this, m_camera);        m_preview.setFocusable(true);//开启对焦        m_preview.setBackgroundColor(TRIM_MEMORY_BACKGROUND);        try {            m_camera.setDisplayOrientation(90);        } catch (Exception e) {            this.finish();        }        preview = (FrameLayout) findViewById(R.id.camera_preview);        preview.addView(m_preview);        camera_ok = (Button) findViewById(R.id.camera_ok);        camera_exit = (Button) findViewById(R.id.camera_exit);        camera_back = (Button) findViewById(R.id.camera_back);        camera_swicth = (Button) findViewById(R.id.camera_switch);        camera_shutter = (Button) findViewById(R.id.camera_shutter);        preview.setOnClickListener(CameraActivity.this);        camera_ok.setOnClickListener(CameraActivity.this);        camera_exit.setOnClickListener(CameraActivity.this);        camera_back.setOnClickListener(CameraActivity.this);        camera_swicth.setOnClickListener(CameraActivity.this);        camera_shutter.setOnClickListener(CameraActivity.this);    }    @Override    public void onClick(View arg0) {        int i = arg0.getId();        if (i == R.id.camera_preview) {            m_camera.autoFocus(new MyAutoFocusCallback());        } else if (i == R.id.camera_ok) {            camera_back.setClickable(false);            camera_exit.setClickable(false);            savePic();            Intent intent = new Intent(CameraActivity.this,                    SelectPicNewActivity.class);            setResult(RESULT_OK, intent);            m_camera = null;            mHolder = null;            finish();        } else if (i == R.id.camera_exit) {            if (tempBitmap != null) {                tempBitmap.recycle();                tempBitmap = null;            }            if (m_camera != null && isClick) {                m_camera.stopPreview();//关闭预览，处理数据                m_camera.release();                m_camera = null;                mHolder = null;            }            finish();        } else if (i == R.id.camera_back) {            preview.setClickable(true);            camera_ok.setClickable(false);            camera_exit.setClickable(false);            isClick = true;            ((RelativeLayout) CameraActivity.this.findViewById(R.id.boom)).setVisibility(View.GONE);            camera_swicth.setVisibility(View.VISIBLE);            camera_shutter.setVisibility(View.VISIBLE);            if (tempBitmap != null) {                tempBitmap.recycle();                tempBitmap = null;            }            try {                m_camera = null;                m_camera = Camera.open(cameraPosition == 1 ? 0 : 1);                if (cameraPosition == 1) {                    initCamera();                } else {                    Camera.Parameters parameters = m_camera.getParameters();                    Size previewSize = getPropPreviewSize(                            parameters.getSupportedPreviewSizes(), getScreenRate(this), 800);                    parameters.setPreviewSize(previewSize.width, previewSize.height);                    m_camera.setParameters(parameters);                }                m_camera.setDisplayOrientation(90);                m_camera.setPreviewDisplay(mHolder);            } catch (IOException e) {                e.printStackTrace();            }            m_camera.startPreview();//处理完毕开始预览            camera_exit.setClickable(true);        } else if (i == R.id.camera_switch) {            Switch();        } else if (i == R.id.camera_shutter) {            camera_exit.setVisibility(View.GONE);            camera_swicth.setVisibility(View.GONE);            camera_shutter.setVisibility(View.GONE);            preview.setClickable(false);            camera_exit.setClickable(true);            camera_ok.setClickable(true);            camera_back.setClickable(true);            isClick = false;            try {                new Thread(new Runnable() {                    @Override                    public void run() {                        m_camera.setOneShotPreviewCallback(new PreviewOnePointCallBack());                        //  m_camera.takePicture(myShutterCallback, myRawCallback, mPicture);                    }                }).start();            } catch (Exception e) {                Log.d(Tag, "exception");            }        } else {        }    }    private boolean checkCameraHardware(Context context) {        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {            Log.v(Tag, "camera can be used!");            return true;        } else {            Toast.makeText(CameraActivity.this, R.string.on_camera, Toast.LENGTH_LONG).show();            return false;        }    }    private void savePic() {        if (picPath != null && tempBitmap != null) {            try {                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(picPath));                tempBitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);//将图片压缩到流里面                bos.flush();//刷新缓冲区的输出流                bos.close();//关闭输出流并释放和此流有关的系统资源                if (tempBitmap != null) {                    tempBitmap.recycle();                    tempBitmap = null;                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    /**     * 前后摄像头切换     */    protected void Switch() {        int cameraCount = 0;        Camera.CameraInfo info = new Camera.CameraInfo();        cameraCount = Camera.getNumberOfCameras();        for (int i = 0; i < cameraCount; i++) {            Camera.getCameraInfo(i, info);            if (cameraPosition == 1) {                if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {                    m_camera.stopPreview();                    m_camera.release();                    m_camera = null;                    m_camera = Camera.open(i);                    Camera.Parameters parameters = m_camera.getParameters();                    Camera.Size previewSize = getPropPreviewSize(                            parameters.getSupportedPreviewSizes(), getScreenRate(this), 800);                    parameters.setPreviewSize(previewSize.width, previewSize.height);                    m_camera.setParameters(parameters);                    m_camera.setDisplayOrientation(90);                    try {                        m_camera.setPreviewDisplay(mHolder);                    } catch (IOException e) {                        e.printStackTrace();                    }                    m_camera.startPreview();                    cameraPosition = 0;                    break;                }            } else {                if (info.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {                    m_camera.stopPreview();                    m_camera.release();                    m_camera = null;                    m_camera = Camera.open(i);                    initCamera();                    m_camera.setDisplayOrientation(90);                    try {                        m_camera.setPreviewDisplay(mHolder);                    } catch (IOException e) {                        e.printStackTrace();                    }                    m_camera.startPreview();                    cameraPosition = 1;                    break;                }            }        }    }    private void initCamera() {        if (m_camera != null) {            try {                Camera.Parameters parameters = m_camera.getParameters();                parameters.setPictureFormat(PixelFormat.JPEG);                //设置PreviewSize                Camera.Size previewSize = getPropPreviewSize(                        parameters.getSupportedPreviewSizes(), getScreenRate(this), 800);                parameters.setPreviewSize(previewSize.width, previewSize.height);                //parameters.setFlashMode(Parameters.FLASH_MODE_TORCH);                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);//1连续对焦                parameters.setJpegQuality(30);                m_camera.setParameters(parameters);            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void initCamera1() {        parameters = m_camera.getParameters();        parameters.setPictureFormat(PixelFormat.JPEG);//图片格式        m_camera.setParameters(parameters);        m_camera.startPreview();        m_camera.cancelAutoFocus();// 2如果要实现连续的自动对焦，这一句必须加上 */    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        // TODO Auto-generated method stub        if (keyCode == KeyEvent.KEYCODE_BACK) {            try {                Log.v(Tag, "back");                m_camera.stopPreview();                m_camera.release();                if (tempBitmap != null) {                    tempBitmap.recycle();                    tempBitmap = null;                }                m_camera = null;                mHolder = null;                finish();            } catch (Exception e) {                Log.v(Tag, "error in back");                e.printStackTrace();            }        }        return super.onKeyDown(keyCode, event);    }    public Camera.Size getPropPreviewSize(List<Camera.Size> list, float th, int minWidth) {        Collections.sort(list, sizeComparator);        boolean hasSize = false;        int hasSizeIndex = 0;        int i = 0;        for (Camera.Size s : list) {            if ((s.width >= minWidth) && equalRate(s, th)) {                Log.i("camera", "PreviewSize:w = " + s.width + "h = " + s.height);                hasSize = true;                hasSizeIndex = i;            }            i++;        }        if (i == list.size() && !hasSize) {            i = 0;//如果没找到，就选最小的size        } else {            i = hasSizeIndex;        }        return list.get(i);    }    public boolean equalRate(Camera.Size s, float rate) {        float r = (float) (s.width) / (float) (s.height);        if (Math.abs(r - rate) <= 0.03) {            return true;        } else {            return false;        }    }    class PreviewOnePointCallBack implements Camera.PreviewCallback {        @Override        public void onPreviewFrame(byte[] data, Camera camera) {            Camera.Size size = camera.getParameters().getPreviewSize();            try {                // 调用image.compressToJpeg（）将YUV格式图像数据data转为jpg格式                YuvImage image = new YuvImage(data, ImageFormat.NV21, size.width,                        size.height, null);                if (image != null) {                    ByteArrayOutputStream stream = new ByteArrayOutputStream();                    image.compressToJpeg(new Rect(0, 0, size.width, size.height),                            80, stream);                    tempBitmap = BitmapFactory.decodeByteArray(                            stream.toByteArray(), 0, stream.size());                    stream.close();                }                m_camera.stopPreview();//关闭预览，处理数据                m_camera.release();                //camera_shutter.setVisibility(View.GONE);                ((RelativeLayout) CameraActivity.this.findViewById(R.id.boom)).setVisibility(View.VISIBLE);                camera_exit.setVisibility(View.VISIBLE);                Matrix matrix = new Matrix();                if (0 == cameraPosition) {                    matrix.postRotate(270);                } else {                    matrix.postRotate(90);                }                tempBitmap = Bitmap.createBitmap(tempBitmap, 0, 0, tempBitmap.getWidth(), tempBitmap.getHeight(), matrix, true);            } catch (Exception ex) {                Log.e("Sys", "Error:" + ex.getMessage());            }        }    }    public class MyAutoFocusCallback implements Camera.AutoFocusCallback {        @Override        public void onAutoFocus(boolean success, Camera camera) {            if (success) {                Log.d(Tag, "对焦");                initCamera1();//实现相机的参数初始化                camera.cancelAutoFocus();//只有加上了这一句，才会自动对焦。            }        }    }    public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {        private Camera mCamera;        public CameraPreview(Context context, Camera camera) {            super(context);//这是引用父类的构造方法，context是参数            // TODO Auto-generated constructor stub            mCamera = camera;            mHolder = getHolder();//获得SurfaceView所对应的Surface所对应的SurfaceHolder，获得surface句柄            mHolder.setKeepScreenOn(true);            mHolder.addCallback(this);//添加回调            initCamera();        }        @Override//当surface对象创建后，该方法就会被立即调用。        public void surfaceCreated(SurfaceHolder holder) {            // TODO Auto-generated method stub            try {                Log.d(Tag, "camera created");                mCamera.setPreviewDisplay(holder); //通过surfaceview的holder对象显示相机界面                mCamera.startPreview();//开始预览            } catch (Exception e) {                Log.d(Tag, "Error setting camera preview: " + e.getMessage());                e.printStackTrace();            }        }        @Override//当surface对象在将要销毁前，该方法会被立即调用。        public void surfaceDestroyed(SurfaceHolder holder) {        }        @Override//当surface发生任何结构性的变化时（格式或者大小），该方法就会被立即调用。        public void surfaceChanged(SurfaceHolder holder, int format, int width,                                   int height) {            if (mHolder.getSurface() == null) {                return;            }            try {                mCamera.stopPreview();            } catch (Exception e) {            }            try {                mCamera.setPreviewDisplay(mHolder);                mCamera.startPreview();                mCamera.autoFocus(new MyAutoFocusCallback());                Log.d(Tag, "camera changed");            } catch (Exception e) {                Log.d(Tag, "Error starting camera preview: " + e.getMessage());            }        }    }    public class CameraSizeComparator implements Comparator<Camera.Size> {        public int compare(Camera.Size lhs, Camera.Size rhs) {            // TODO Auto-generated method stub            if (lhs.width == rhs.width) {                return 0;            } else if (lhs.width > rhs.width) {                return 1;            } else {                return -1;            }        }    }}