package green.dao.htj;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import green.dao.htj.DeliveryOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DELIVERY_ORDER.
*/
public class DeliveryOrderDao extends AbstractDao<DeliveryOrder, String> {

    public static final String TABLENAME = "DELIVERY_ORDER";

    /**
     * Properties of entity DeliveryOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Order_id = new Property(0, String.class, "order_id", true, "ORDER_ID");
        public final static Property Customer_name = new Property(1, String.class, "customer_name", false, "CUSTOMER_NAME");
        public final static Property Customer_mobile = new Property(2, String.class, "customer_mobile", false, "CUSTOMER_MOBILE");
        public final static Property Customer_sex = new Property(3, int.class, "customer_sex", false, "CUSTOMER_SEX");
        public final static Property Customer_address = new Property(4, String.class, "customer_address", false, "CUSTOMER_ADDRESS");
        public final static Property Customer_lng = new Property(5, double.class, "customer_lng", false, "CUSTOMER_LNG");
        public final static Property Customer_lat = new Property(6, double.class, "customer_lat", false, "CUSTOMER_LAT");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property ReminderNumber = new Property(8, Integer.class, "reminderNumber", false, "REMINDER_NUMBER");
        public final static Property DeliverPhone = new Property(9, String.class, "deliverPhone", false, "DELIVER_PHONE");
        public final static Property LastReminderTime = new Property(10, Long.class, "lastReminderTime", false, "LAST_REMINDER_TIME");
        public final static Property AddTime = new Property(11, Long.class, "addTime", false, "ADD_TIME");
        public final static Property QueryBatch = new Property(12, String.class, "queryBatch", false, "QUERY_BATCH");
    };

    private DaoSession daoSession;


    public DeliveryOrderDao(DaoConfig config) {
        super(config);
    }
    
    public DeliveryOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DELIVERY_ORDER' (" + //
                "'ORDER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: order_id
                "'CUSTOMER_NAME' TEXT," + // 1: customer_name
                "'CUSTOMER_MOBILE' TEXT," + // 2: customer_mobile
                "'CUSTOMER_SEX' INTEGER NOT NULL ," + // 3: customer_sex
                "'CUSTOMER_ADDRESS' TEXT NOT NULL ," + // 4: customer_address
                "'CUSTOMER_LNG' REAL NOT NULL ," + // 5: customer_lng
                "'CUSTOMER_LAT' REAL NOT NULL ," + // 6: customer_lat
                "'STATUS' INTEGER," + // 7: status
                "'REMINDER_NUMBER' INTEGER," + // 8: reminderNumber
                "'DELIVER_PHONE' TEXT NOT NULL ," + // 9: deliverPhone
                "'LAST_REMINDER_TIME' INTEGER," + // 10: lastReminderTime
                "'ADD_TIME' INTEGER," + // 11: addTime
                "'QUERY_BATCH' TEXT);"); // 12: queryBatch
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DELIVERY_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeliveryOrder entity) {
        stmt.clearBindings();
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(1, order_id);
        }
 
        String customer_name = entity.getCustomer_name();
        if (customer_name != null) {
            stmt.bindString(2, customer_name);
        }
 
        String customer_mobile = entity.getCustomer_mobile();
        if (customer_mobile != null) {
            stmt.bindString(3, customer_mobile);
        }
        stmt.bindLong(4, entity.getCustomer_sex());
        stmt.bindString(5, entity.getCustomer_address());
        stmt.bindDouble(6, entity.getCustomer_lng());
        stmt.bindDouble(7, entity.getCustomer_lat());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        Integer reminderNumber = entity.getReminderNumber();
        if (reminderNumber != null) {
            stmt.bindLong(9, reminderNumber);
        }
        stmt.bindString(10, entity.getDeliverPhone());
 
        Long lastReminderTime = entity.getLastReminderTime();
        if (lastReminderTime != null) {
            stmt.bindLong(11, lastReminderTime);
        }
 
        Long addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(12, addTime);
        }
 
        String queryBatch = entity.getQueryBatch();
        if (queryBatch != null) {
            stmt.bindString(13, queryBatch);
        }
    }

    @Override
    protected void attachEntity(DeliveryOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeliveryOrder readEntity(Cursor cursor, int offset) {
        DeliveryOrder entity = new DeliveryOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // order_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customer_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customer_mobile
            cursor.getInt(offset + 3), // customer_sex
            cursor.getString(offset + 4), // customer_address
            cursor.getDouble(offset + 5), // customer_lng
            cursor.getDouble(offset + 6), // customer_lat
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // reminderNumber
            cursor.getString(offset + 9), // deliverPhone
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lastReminderTime
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // addTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // queryBatch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeliveryOrder entity, int offset) {
        entity.setOrder_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCustomer_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomer_mobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomer_sex(cursor.getInt(offset + 3));
        entity.setCustomer_address(cursor.getString(offset + 4));
        entity.setCustomer_lng(cursor.getDouble(offset + 5));
        entity.setCustomer_lat(cursor.getDouble(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setReminderNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDeliverPhone(cursor.getString(offset + 9));
        entity.setLastReminderTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setAddTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setQueryBatch(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DeliveryOrder entity, long rowId) {
        return entity.getOrder_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DeliveryOrder entity) {
        if(entity != null) {
            return entity.getOrder_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
