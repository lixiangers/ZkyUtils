package green.dao.htj;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import green.dao.htj.StoreInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORE_INFO.
*/
public class StoreInfoDao extends AbstractDao<StoreInfo, String> {

    public static final String TABLENAME = "STORE_INFO";

    /**
     * Properties of entity StoreInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Phone = new Property(0, String.class, "phone", true, "PHONE");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Lng = new Property(3, Double.class, "lng", false, "LNG");
        public final static Property Lat = new Property(4, double.class, "lat", false, "LAT");
        public final static Property Code = new Property(5, String.class, "code", false, "CODE");
    };

    private DaoSession daoSession;


    public StoreInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StoreInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORE_INFO' (" + //
                "'PHONE' TEXT PRIMARY KEY NOT NULL ," + // 0: phone
                "'ID' INTEGER," + // 1: id
                "'NAME' TEXT," + // 2: name
                "'LNG' REAL," + // 3: lng
                "'LAT' REAL NOT NULL ," + // 4: lat
                "'CODE' TEXT NOT NULL );"); // 5: code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoreInfo entity) {
        stmt.clearBindings();
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(1, phone);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(4, lng);
        }
        stmt.bindDouble(5, entity.getLat());
        stmt.bindString(6, entity.getCode());
    }

    @Override
    protected void attachEntity(StoreInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StoreInfo readEntity(Cursor cursor, int offset) {
        StoreInfo entity = new StoreInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // phone
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lng
            cursor.getDouble(offset + 4), // lat
            cursor.getString(offset + 5) // code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoreInfo entity, int offset) {
        entity.setPhone(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLng(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLat(cursor.getDouble(offset + 4));
        entity.setCode(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StoreInfo entity, long rowId) {
        return entity.getPhone();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StoreInfo entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
